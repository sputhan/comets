<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.1 (Python 3.8.6 on linux)" generated="20200926 05:35:55.004" rpa="false">
<suite id="s1" name="Testcases" source="/testcases">
<suite id="s1-s1" name="Query With Date" source="/testcases/query_with_date.robot">
<test id="s1-s1-t1" name="Valid Query with data range +D and now">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:35:55.352" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:35:55.351" endtime="20200926 05:35:55.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=now</arg>
<arg>date-max=+100</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:35:55.353" level="INFO">${params} = {'date-min': 'now', 'date-max': '+100'}</msg>
<status status="PASS" starttime="20200926 05:35:55.352" endtime="20200926 05:35:55.353"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:35:58.529" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B100 
 path_url=/cad.api/?date-min=now&amp;date-max=%2B100 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:35:58.531" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B100 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"54","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 SQ4","1","2459119.253705607","2020-Sep-26 18:05","0.00236326129937573","0.00234794221476587","0.00237857780739009","12.928103612861","12.8405975629144","&lt; 00:01","28.877"],["2020 RF4","5","2459119.355559825","2020-Sep-26 20:32","0.0299720155857069","0.0297019312512143","0.0302420954605105","13.8024017871393","13.7959594550554","&lt; 00:01","24.647"],["2020 RF5","5","2459120.135334942","2020-Sep-27 15:15","0.0361233379660649","0.0360035918598666","0.0362430763665069","3.89287417547284","3.873880242332","00:01","24.093"],["2020 SU4","1","2459120.149922359","2020-Sep-27 15:36","0.0321540804542953","0.0319171037144888","0.0323910531364174","9.10819583775812","9.09909333186976","00:04","23.583"],["2020 SO4","2","2459120.454852107","2020-Sep-27 22:55","0.0172734082684217","0.0171210147343767","0.017425787843728","7.63994487438416","7.61972776329167","&lt; 00:01","27.338"],["2020 SY4","1","2459121.254165600","2020-Sep-28 18:06","0.00483883371779662","0.00482232459881732","0.0048553423928586","16.1192324413903","16.0850354244224","00:02","27.455"],["2020 PM7","13","2459122.094220599","2020-Sep-29 14:16","0.0191995697170515","0.0191994151379874","0.0191997242961396","8.33399698633299","8.31732827397181","&lt; 00:01","22.366"],["2020 SQ","4","2459123.173384542","2020-Sep-30 16:10","0.0146185345453072","0.0145425586481242","0.0146945023061576","5.9297335210296","5.89891559809395","&lt; 00:01","27.462"],["2020 SO2","3","2459123.362170771","2020-Sep-30 20:42","0.0462213632197174","0.0460479717290339","0.0463947540313387","14.7536426928334","14.7497349330028","&lt; 00:01","24.782"],["2020 SM4","1","2459123.580813959","2020-Oct-01 01:56","0.0209051291867191","0.0204109784606601","0.0213991782753833","7.61794334093787","7.60119393291081","00:05","27.662"],["2020 RJ3","6","2459123.898031237","2020-Oct-01 09:33","0.0391539311841341","0.0389101923279274","0.0393976682969611","15.4814457717605","15.4770494736317","00:01","23.591"],["2001 GP2","16","2459124.124581813","2020-Oct-01 14:59","0.0156459035754592","0.000909498572984523","0.0367119299148074","2.21414127161807","2.13584266201369","6_17:18","26.9"],["2020 RZ3","4","2459124.856553334","2020-Oct-02 08:33","0.0400047896442245","0.0396029188014945","0.0404066545317252","13.2463832308905","13.2413541861552","&lt; 00:01","24.909"],["2020 SY3","1","2459125.598386229","2020-Oct-03 02:22","0.0425861476823042","0.0419222821967175","0.0432499722110021","7.80454708858754","7.79652625477589","00:03","25.859"],["2010 UC","10","2459126.848329403","2020-Oct-04 08:22","0.0372611055270925","0.0311238017016864","0.0437269116807565","3.21236292632068","3.19002490826751","1_04:00","27.4"],["2020 RV2","8","2459128.455794825","2020-Oct-05 22:56","0.0380358854669288","0.0378990941391581","0.0381726686949511","4.16017343376627","4.14330056255971","&lt; 00:01","25.675"],["2020 RR2","6","2459129.121458052","2020-Oct-06 14:55","0.0417278866831971","0.0414797796890583","0.0419759705656133","4.08058647587182","4.0649081929112","00:01","25.447"],["2020 RK2","8","2459130.049769445","2020-Oct-07 13:12","0.025593809947634","0.0255051781557218","0.0256824388679742","6.67895045980567","6.66334498961714","00:02","24.282"],["2019 SB6","2","2459130.474376995","2020-Oct-07 23:23","0.0304426271757058","0.0227471207759548","0.038143587726216","7.57778003426213","7.56622105215934","03:41","26.8"],["2020 SX3","1","2459130.969118184","2020-Oct-08 11:16","0.0113552897778354","0.0113219329492695","0.011388646066506","10.8793643184594","10.8577748602004","00:13","24.237"],["2020 RO1","5","2459132.176101537","2020-Oct-09 16:14","0.0446415058754544","0.0446116500030021","0.0446713612988751","3.21348334260181","3.19485569402529","&lt; 00:01","25.405"],["2018 GD2","1","2459136.073021506","2020-Oct-13 13:45","0.0418695882785897","0.0370963199607446","0.0466556919039509","6.70010747896787","6.69060274315132","03:59","29.4"],["2020 RM6","2","2459137.715925501","2020-Oct-15 05:11","0.0332721522815656","0.0331709286933099","0.033373374308984","7.70853312607536","7.69813745186573","00:30","24.795"],["2017 UH5","2","2459142.636167668","2020-Oct-20 03:16","0.0228340554196692","0.0222591527415551","0.0414088955279864","5.92821261429195","5.90849618170005","6_12:30","26.5"],["2020 SG3","1","2459143.417349553","2020-Oct-20 22:01","0.0499704765003738","0.0496206318726607","0.0503203051288128","5.33538314966816","5.32537991238859","00:21","25.14"],["2018 VG","3","2459144.153455600","2020-Oct-21 15:41","0.0387040891193301","0.0374898264219415","0.0399273001093406","6.72609608291864","6.7158531754433","19:40","27.4"],["2017 TK6","8","2459146.940793558","2020-Oct-24 10:35","0.0441892043374442","0.0424566365206183","0.0471094261315949","12.4455264686515","12.4406806466282","03:58","24.7"],["2008 GM2","12","2459148.492460866","2020-Oct-25 23:49","0.0452029089395396","0.0362103357028827","0.0545926865198956","3.58621722267222","3.56974288141363","07:38","28.3"],["2020 QD5","2","2459148.621940456","2020-Oct-26 02:56","0.025763042373117","0.0257243482456801","0.0258017423282164","8.56921365449276","8.55713606131734","00:45","23.227"],["2020 OK5","17","2459151.871015311","2020-Oct-29 08:54","0.0164352219242664","0.016426932284683","0.0164435102936967","1.2862131423086","1.15330139442132","00:03","25.558"],["2018 VP1","4","2459155.981541014","2020-Nov-02 11:33","0.00280167254552464","3.90766585857012e-05","0.0256085074009903","9.71114662839966","9.61271582257126","3_07:11","30.9"],["2020 HF4","5","2459157.453326852","2020-Nov-03 22:53","0.0414035151003734","0.0410997052947467","0.0417073377153219","2.88844049797212","2.86607407960607","00:04","27.563"],["2010 JL88","7","2459159.419528397","2020-Nov-05 22:04","0.0267818380363214","0.00118085989258472","0.124246396626902","15.6639825482897","15.6576298553779","5_18:57","26.8"],["2019 XS","4","2459161.384049088","2020-Nov-07 21:13","0.0393955999561795","0.0348619785193184","0.0439367808461489","9.44588784861025","9.43872498720352","03:14","24.2"],["2018 VS4","3","2459162.958550490","2020-Nov-09 11:00","0.0381472776329596","0.0344188790586722","0.0835829161332143","10.0703922632204","10.0634539795072","5_07:22","25.8"],["2020 ST1","2","2459167.856242321","2020-Nov-14 08:33","0.0488551080602693","0.0485770562763381","0.0491331592150588","8.05151987430075","8.04474334518222","01:25","21.684"],["2019 VL5","2","2459168.934759671","2020-Nov-15 10:26","0.021732810007007","0.0217292375096055","0.0223542176744774","8.17741153263742","8.16240503679483","04:03","25.9"],["2017 WJ16","5","2459177.036929361","2020-Nov-23 12:53","0.0127091896304229","0.01043030494715","0.01572438024177","4.75066355638837","4.70632601749626","1_18:20","24.3"],["2018 RQ4","6","2459179.694905144","2020-Nov-26 04:41","0.0208558171837912","0.00285411045178811","0.0572555901582887","7.43856924406299","7.42137441041999","8_01:42","26.9"],["2020 KZ2","5","2459181.696573437","2020-Nov-28 04:43","0.0145807732550289","0.0143258402477287","0.0148369892668334","3.91171979677915","3.86472163295805","00:32","27.683"],["153201","116","2459182.714106554","2020-Nov-29 05:08","0.0287618678984483","0.0287609099965326","0.0287628258007809","25.0726387403463","25.0689436315515","&lt; 00:01","19.3"],["2020 SO","5","2459184.854690500","2020-Dec-01 08:31","0.000338528317787544","0.00032614912539586","0.000350957014074615","3.89632283798929",null,"03:45","28.323"],["2019 XH2","2","2459186.370797788","2020-Dec-02 20:54","0.0412567445803152","0.0402962941868718","0.0422179557413965","6.36365066915733","6.35349384837461","00:52","28.9"],["2018 PK21","26","2459191.600644458","2020-Dec-08 02:25","0.0312912700581425","0.0312852398976057","0.0312973002134019","3.12831448299601","3.10097561012007","00:01","25.9"],["2019 XQ1","3","2459196.851907705","2020-Dec-13 08:27","0.0470287873195894","0.041898280050947","0.0528055679137899","8.60500039767212","8.59841375766799","01:19","25.4"],["2017 XQ60","6","2459204.845571602","2020-Dec-21 08:18","0.0277285314175881","0.0277283439409417","0.0277287188947011","15.6097303719786","15.6035732785116","&lt; 00:01","24.4"],["2011 CL50","8","2459208.028489769","2020-Dec-24 12:41","0.00788090430362214","0.00302360164403368","0.0141234745666059","3.35684050277563","3.25456478941152","3_01:28","27.6"],["501647","43","2459209.347539741","2020-Dec-25 20:20","0.0201908467048819","0.0201899675524607","0.0201917259826511","10.0103855596615","9.9971940874639","&lt; 00:01","22.3"],["2012 XE133","17","2459210.646866968","2020-Dec-27 03:31","0.0299554536367095","0.0137890436680283","0.0461833332859753","9.16204110348195","9.15232763136741","3_07:46","23.4"],["2016 AF2","7","2459210.822096392","2020-Dec-27 07:44","0.0187199201642096","0.00983030386207064","0.0286568129578519","5.34936153404817","5.32268738627582","1_09:43","27.9"],["2012 UK171","29","2459213.615297703","2020-Dec-30 02:46","0.0397125561014241","0.0397118783256754","0.0397132338779651","4.70558824808848","4.69130818682532","&lt; 00:01","24.4"],["2019 YB4","3","2459216.892131196","2021-Jan-02 09:25","0.0431336219794605","0.0415219786626925","0.0447465830455071","7.15325373767577","7.14461291322011","01:20","26.8"],["2003 AF23","34","2459218.265070660","2021-Jan-03 18:22","0.0467425696205151","0.0467418026333367","0.0467433366084162","15.7848072140074","15.7811955264004","&lt; 00:01","20.9"],["2019 QW2","5","2459218.390295895","2021-Jan-03 21:22","0.0224980087479593","0.0224633226942209","0.0226478436475519","4.89140412580883","4.86713167602248","03:41","24.8"]]}
 
 </msg>
<msg timestamp="20200926 05:35:58.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:35:55.353" endtime="20200926 05:35:58.534"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:35:58.534" endtime="20200926 05:35:58.537"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_1}</var>
</assign>
<msg timestamp="20200926 05:35:58.538" level="INFO">${count_1} = 54</msg>
<status status="PASS" starttime="20200926 05:35:58.537" endtime="20200926 05:35:58.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=now</arg>
<arg>date-max=+30</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:35:58.539" level="INFO">${params} = {'date-min': 'now', 'date-max': '+30'}</msg>
<status status="PASS" starttime="20200926 05:35:58.538" endtime="20200926 05:35:58.539"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:00.776" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B30 
 path_url=/cad.api/?date-min=now&amp;date-max=%2B30 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:00.776" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B30 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"28","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 SQ4","1","2459119.253705607","2020-Sep-26 18:05","0.00236326129937573","0.00234794221476587","0.00237857780739009","12.928103612861","12.8405975629144","&lt; 00:01","28.877"],["2020 RF4","5","2459119.355559825","2020-Sep-26 20:32","0.0299720155857069","0.0297019312512143","0.0302420954605105","13.8024017871393","13.7959594550554","&lt; 00:01","24.647"],["2020 RF5","5","2459120.135334942","2020-Sep-27 15:15","0.0361233379660649","0.0360035918598666","0.0362430763665069","3.89287417547284","3.873880242332","00:01","24.093"],["2020 SU4","1","2459120.149922359","2020-Sep-27 15:36","0.0321540804542953","0.0319171037144888","0.0323910531364174","9.10819583775812","9.09909333186976","00:04","23.583"],["2020 SO4","2","2459120.454852107","2020-Sep-27 22:55","0.0172734082684217","0.0171210147343767","0.017425787843728","7.63994487438416","7.61972776329167","&lt; 00:01","27.338"],["2020 SY4","1","2459121.254165600","2020-Sep-28 18:06","0.00483883371779662","0.00482232459881732","0.0048553423928586","16.1192324413903","16.0850354244224","00:02","27.455"],["2020 PM7","13","2459122.094220599","2020-Sep-29 14:16","0.0191995697170515","0.0191994151379874","0.0191997242961396","8.33399698633299","8.31732827397181","&lt; 00:01","22.366"],["2020 SQ","4","2459123.173384542","2020-Sep-30 16:10","0.0146185345453072","0.0145425586481242","0.0146945023061576","5.9297335210296","5.89891559809395","&lt; 00:01","27.462"],["2020 SO2","3","2459123.362170771","2020-Sep-30 20:42","0.0462213632197174","0.0460479717290339","0.0463947540313387","14.7536426928334","14.7497349330028","&lt; 00:01","24.782"],["2020 SM4","1","2459123.580813959","2020-Oct-01 01:56","0.0209051291867191","0.0204109784606601","0.0213991782753833","7.61794334093787","7.60119393291081","00:05","27.662"],["2020 RJ3","6","2459123.898031237","2020-Oct-01 09:33","0.0391539311841341","0.0389101923279274","0.0393976682969611","15.4814457717605","15.4770494736317","00:01","23.591"],["2001 GP2","16","2459124.124581813","2020-Oct-01 14:59","0.0156459035754592","0.000909498572984523","0.0367119299148074","2.21414127161807","2.13584266201369","6_17:18","26.9"],["2020 RZ3","4","2459124.856553334","2020-Oct-02 08:33","0.0400047896442245","0.0396029188014945","0.0404066545317252","13.2463832308905","13.2413541861552","&lt; 00:01","24.909"],["2020 SY3","1","2459125.598386229","2020-Oct-03 02:22","0.0425861476823042","0.0419222821967175","0.0432499722110021","7.80454708858754","7.79652625477589","00:03","25.859"],["2010 UC","10","2459126.848329403","2020-Oct-04 08:22","0.0372611055270925","0.0311238017016864","0.0437269116807565","3.21236292632068","3.19002490826751","1_04:00","27.4"],["2020 RV2","8","2459128.455794825","2020-Oct-05 22:56","0.0380358854669288","0.0378990941391581","0.0381726686949511","4.16017343376627","4.14330056255971","&lt; 00:01","25.675"],["2020 RR2","6","2459129.121458052","2020-Oct-06 14:55","0.0417278866831971","0.0414797796890583","0.0419759705656133","4.08058647587182","4.0649081929112","00:01","25.447"],["2020 RK2","8","2459130.049769445","2020-Oct-07 13:12","0.025593809947634","0.0255051781557218","0.0256824388679742","6.67895045980567","6.66334498961714","00:02","24.282"],["2019 SB6","2","2459130.474376995","2020-Oct-07 23:23","0.0304426271757058","0.0227471207759548","0.038143587726216","7.57778003426213","7.56622105215934","03:41","26.8"],["2020 SX3","1","2459130.969118184","2020-Oct-08 11:16","0.0113552897778354","0.0113219329492695","0.011388646066506","10.8793643184594","10.8577748602004","00:13","24.237"],["2020 RO1","5","2459132.176101537","2020-Oct-09 16:14","0.0446415058754544","0.0446116500030021","0.0446713612988751","3.21348334260181","3.19485569402529","&lt; 00:01","25.405"],["2018 GD2","1","2459136.073021506","2020-Oct-13 13:45","0.0418695882785897","0.0370963199607446","0.0466556919039509","6.70010747896787","6.69060274315132","03:59","29.4"],["2020 RM6","2","2459137.715925501","2020-Oct-15 05:11","0.0332721522815656","0.0331709286933099","0.033373374308984","7.70853312607536","7.69813745186573","00:30","24.795"],["2017 UH5","2","2459142.636167668","2020-Oct-20 03:16","0.0228340554196692","0.0222591527415551","0.0414088955279864","5.92821261429195","5.90849618170005","6_12:30","26.5"],["2020 SG3","1","2459143.417349553","2020-Oct-20 22:01","0.0499704765003738","0.0496206318726607","0.0503203051288128","5.33538314966816","5.32537991238859","00:21","25.14"],["2018 VG","3","2459144.153455600","2020-Oct-21 15:41","0.0387040891193301","0.0374898264219415","0.0399273001093406","6.72609608291864","6.7158531754433","19:40","27.4"],["2017 TK6","8","2459146.940793558","2020-Oct-24 10:35","0.0441892043374442","0.0424566365206183","0.0471094261315949","12.4455264686515","12.4406806466282","03:58","24.7"],["2008 GM2","12","2459148.492460866","2020-Oct-25 23:49","0.0452029089395396","0.0362103357028827","0.0545926865198956","3.58621722267222","3.56974288141363","07:38","28.3"]]}
 
 </msg>
<msg timestamp="20200926 05:36:00.777" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:35:58.539" endtime="20200926 05:36:00.777"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:00.777" endtime="20200926 05:36:00.779"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_2}</var>
</assign>
<msg timestamp="20200926 05:36:00.780" level="INFO">${count_2} = 28</msg>
<status status="PASS" starttime="20200926 05:36:00.779" endtime="20200926 05:36:00.780"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count_2}&lt;${count_1}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:00.780" endtime="20200926 05:36:00.781"></status>
</kw>
<doc>Querying within a shorter date range should return smaller count in output</doc>
<status status="PASS" starttime="20200926 05:35:55.349" endtime="20200926 05:36:00.782" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Valid Query with data range YYYY-MM-DD format">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:00.786" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:00.785" endtime="20200926 05:36:00.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-01-01</arg>
<arg>date-max=2021-01-01</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:00.787" level="INFO">${params} = {'date-min': '2020-01-01', 'date-max': '2021-01-01'}</msg>
<status status="PASS" starttime="20200926 05:36:00.787" endtime="20200926 05:36:00.787"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:06.808" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01&amp;date-max=2021-01-01 
 path_url=/cad.api/?date-min=2020-01-01&amp;date-max=2021-01-01 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:06.820" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01&amp;date-max=2021-01-01 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"991","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 AY1","18","2458849.537524496","2020-Jan-01 00:54","0.0211660525256395","0.0211628345552616","0.0211692704882042","5.62203195551878","5.59959589405614","&lt; 00:01","25.1"],["2019 YK","10","2458849.587205145","2020-Jan-01 02:06","0.0361009669651545","0.0360768281418277","0.036125105699654","7.35926323695148","7.34922735808709","&lt; 00:01","24.0"],["2020 AP3","3","2458849.967321891","2020-Jan-01 11:13","0.016740489928579","0.0165847767193932","0.0168961703957377","5.19125156562752","5.16050048887452","00:05","26.553"],["2020 AN2","1","2458850.387698740","2020-Jan-01 21:18","0.020214316165424","0.0196465481009428","0.0207820803258877","15.352815636266","15.3442277407805","00:33","26.5"],["2020 AX","5","2458850.450408128","2020-Jan-01 22:49","0.0496561819852301","0.0491870434455958","0.0501253026338964","7.31673540668655","7.30939805228442","00:04","26.3"],["2020 AC","6","2458850.788622951","2020-Jan-02 06:56","0.0086567240263386","0.00864974351431503","0.00866370436258854","5.79319914432443","5.73982319076542","&lt; 00:01","26.7"],["2020 AD","2","2458850.883299537","2020-Jan-02 09:12","0.00598231592486201","0.0059725724215154","0.00599205528838674","15.6228249367712","15.5942897809943","&lt; 00:01","27.2"],["2019 YH2","6","2458850.900095075","2020-Jan-02 09:36","0.0189064391976048","0.0188309812550671","0.0189818963096383","14.2986027570166","14.2887431688911","&lt; 00:01","23.2"],["2020 AP1","1","2458851.147682974","2020-Jan-02 15:33","0.00218473067276251","0.00217927215347409","0.0021901874886484","5.60854260728927","5.3867027791126","00:02","29.6"],["2019 AE3","2","2458851.172133578","2020-Jan-02 16:08","0.0124617942589971","0.0102637341763702","0.0147485893784087","8.24334619449703","8.2173677521365","01:16","27.4"],["2020 AC1","5","2458851.451288471","2020-Jan-02 22:50","0.0053331708788871","0.00531870799651352","0.00534763178772396","6.22573482025152","6.14496247867502","&lt; 00:01","28.4"],["2020 AU2","2","2458852.743126790","2020-Jan-04 05:50","0.0362370373581473","0.0360799222069259","0.0363941497888636","8.58447059261287","8.57590094463927","&lt; 00:01","25.1"],["2020 AN1","5","2458852.791778668","2020-Jan-04 07:00","0.00660719180433069","0.00659964184792792","0.00661474166108693","11.8318436891099","11.7977110475613","&lt; 00:01","25.9"],["2019 YB4","3","2458852.938731317","2020-Jan-04 10:32","0.00839319133276653","0.00836445227453188","0.00842192698258187","6.05791527129178","6.00528292075859","&lt; 00:01","26.8"],["2020 AM2","1","2458853.071699348","2020-Jan-04 13:43","0.0276286812081139","0.0274919464520481","0.0277654142324379","10.1138872947035","10.104347501482","00:04","26.7"],["2020 BM2","3","2458853.706063020","2020-Jan-05 04:57","0.0430123017397846","0.0426638152968863","0.0433607371372465","3.73219522611631","3.71556017024846","00:01","26.936"],["2020 AU1","4","2458854.523114803","2020-Jan-06 00:33","0.0106184868724244","0.0106014537261088","0.0106355193127792","6.27043847552401","6.23029228730618","&lt; 00:01","26.5"],["2020 AW","2","2458854.575304448","2020-Jan-06 01:48","0.0122321188618621","0.0122021753031332","0.0122620588323141","4.27254608270279","4.2212553912473","&lt; 00:01","28.7"],["2019 YT3","5","2458855.617648667","2020-Jan-07 02:49","0.0337557033069716","0.0335880244359087","0.0339233773341538","7.36997485420124","7.35925682099656","&lt; 00:01","25.8"],["2020 BL1","1","2458855.782906935","2020-Jan-07 06:47","0.0298687536847927","0.0296941588592095","0.0300433437146222","8.85520211047762","8.84512249371599","00:03","25.717"],["2020 AV1","6","2458855.823737770","2020-Jan-07 07:46","0.0186063515609208","0.0184687549594991","0.0187439441716533","12.0924879021658","12.0806398138363","&lt; 00:01","26.0"],["2020 AJ1","4","2458856.124992546","2020-Jan-07 15:00","0.0346991631224265","0.0345491695211622","0.0348491563177099","22.1660970799579","22.1626325998996","&lt; 00:01","23.3"],["2020 AR1","3","2458856.720366871","2020-Jan-08 05:17","0.0177505164227812","0.0176606672549202","0.0178403626215284","9.58785726128748","9.57218849445464","&lt; 00:01","27.2"],["2020 AT1","5","2458857.996855590","2020-Jan-09 11:55","0.00633938630613782","0.00631527555116527","0.00636349329609274","6.22829267403799","6.16043979803496","&lt; 00:01","27.6"],["2019 YV","16","2458858.520158941","2020-Jan-10 00:29","0.0443178901560734","0.0443157288409105","0.0443200514700624","4.53697744225617","4.52370648363655","&lt; 00:01","23.6"],["2020 AL2","1","2458858.756895584","2020-Jan-10 06:10","0.0159318034212603","0.0157410707737164","0.0161225336186759","24.7866414447066","24.7798932305596","00:01","25.6"],["2019 YF4","12","2458858.892083832","2020-Jan-10 09:25","0.00954448834371407","0.00954404748008589","0.00954492920420093","2.89711822613741","2.79910086284231","&lt; 00:01","27.0"],["2020 BK7","6","2458859.217912294","2020-Jan-10 17:14","0.0316920487401043","0.0315434088357134","0.0318406700362621","3.55778309909172","3.53407306828208","&lt; 00:01","25.962"],["2019 UO","84","2458859.491600298","2020-Jan-10 23:48","0.0302099374103646","0.0302098072916766","0.0302100675290542","9.39531630593629","9.3859240859659","&lt; 00:01","20.1"],["2020 AH3","4","2458859.574658701","2020-Jan-11 01:48","0.0231105526292864","0.0229640260132234","0.0232570772237124","14.2693109163786","14.2612288570615","&lt; 00:01","24.254"],["2019 WC5","19","2458859.759703757","2020-Jan-11 06:14","0.0162624892955758","0.0162603344325674","0.0162646441578992","12.9762867470008","12.963654333201","&lt; 00:01","22.5"],["2019 YV5","2","2458860.067475859","2020-Jan-11 13:37","0.0430279358182858","0.0427644404184399","0.0432914291156796","13.9380966426353","13.9336531178583","00:05","24.4"],["2020 BW8","6","2458861.209651951","2020-Jan-12 17:02","0.0115463719744305","0.0114941386662305","0.0115986010083167","7.24057186256496","7.20863053715018","00:03","25.964"],["2020 AO1","5","2458861.303919276","2020-Jan-12 19:18","0.0218663603769919","0.0217361017608945","0.0219966177935347","17.7190575181352","17.7121792430779","&lt; 00:01","23.7"],["2020 AJ3","4","2458861.330696221","2020-Jan-12 19:56","0.0478128242728652","0.0475196138358913","0.0481060311431819","10.6140052979946","10.608753643898","&lt; 00:01","25.715"],["2020 AB2","4","2458861.440639751","2020-Jan-12 22:35","0.00980694401472586","0.00973984099834867","0.00987403915634519","7.95663578807888","7.92241546496639","&lt; 00:01","27.0"],["2020 BV5","2","2458861.509972716","2020-Jan-13 00:14","0.0374418990725117","0.037154429471227","0.0377293607415738","8.86675366045396","8.85872419688304","00:02","26.461"],["2020 AE","9","2458861.694477654","2020-Jan-13 04:40","0.0298869011090523","0.0297512789193551","0.0300225185311069","6.76453454099903","6.75134234063491","&lt; 00:01","25.7"],["2020 AX2","2","2458861.915175989","2020-Jan-13 09:58","0.0255172881798727","0.0253729470137191","0.0256616218560749","6.76217606346143","6.74671682572839","&lt; 00:01","25.5"],["2020 AS1","3","2458861.926353998","2020-Jan-13 10:14","0.0404535548668482","0.0400721353213829","0.0408349450757917","5.6902982703246","5.67871148336271","00:01","26.7"],["2020 AE1","1","2458862.076175404","2020-Jan-13 13:50","0.0168284978292684","0.0165836392367664","0.0170764214896591","4.17147892861847","4.13334896731544","01:17","27.6"],["2020 BH","10","2458862.549268324","2020-Jan-14 01:11","0.00699905294568505","0.00699533061609167","0.00700277502783358","3.42685624210207","3.31390417531213","&lt; 00:01","28.248"],["2020 BM","2","2458863.042867911","2020-Jan-14 13:02","0.0312664848075225","0.0310166396799744","0.0315163194294224","7.98556811798908","7.97488942852434","&lt; 00:01","26.412"],["2020 AO","4","2458863.259067707","2020-Jan-14 18:13","0.0239333931189359","0.023620126252802","0.024246655213638","19.472051905479","19.4663336950079","00:03","24.3"],["2020 BS","7","2458863.271588302","2020-Jan-14 18:31","0.00768448997942411","0.00766871787518952","0.00770025948340629","4.1289228083209","4.04407395511947","&lt; 00:01","27.963"],["2020 BD","7","2458863.323779827","2020-Jan-14 19:46","0.0124188552955806","0.0123946471723552","0.0124430631177465","11.4958984454696","11.4772199954756","&lt; 00:01","26.218"],["2020 BZ1","3","2458863.561137594","2020-Jan-15 01:28","0.00639999571053261","0.00637397365071451","0.00642601481844757","7.70815167306289","7.65395008239934","00:01","26.889"],["2020 CZ1","1","2458864.050230682","2020-Jan-15 13:12","0.024722669216713","0.0243592603551492","0.0250860510526617","8.82360219248835","8.81137935648824","01:13","25.475"],["2017 RZ15","1","2458864.081593637","2020-Jan-15 13:57","0.0310326681469712","0.0256714303601913","0.0420252347339659","7.38850984297679","7.37687988030529","01:47","27.1"],["2020 BV2","2","2458864.353995453","2020-Jan-15 20:30","0.0219676071692436","0.0218215941297936","0.0221135838473737","3.6440004157167","3.61056179236584","00:01","27.817"],["2020 BC","4","2458864.436995921","2020-Jan-15 22:29","0.0264386553251573","0.0263362248683651","0.0265410806745984","5.60377782154836","5.58576463025675","&lt; 00:01","26.107"],["2020 AZ1","4","2458864.540783514","2020-Jan-16 00:59","0.0211595856816484","0.0210530973694149","0.0212660566277061","3.95573395042304","3.92377178338542","&lt; 00:01","26.6"],["2020 BD1","6","2458864.569989008","2020-Jan-16 01:41","0.0103407166728558","0.0103212377597698","0.0103601954666104","17.6117254591308","17.597088855455","&lt; 00:01","27.45"],["2019 YD3","15","2458864.690405333","2020-Jan-16 04:34","0.0176075753122292","0.0175989656893766","0.0176161848237085","4.8395091622128","4.80813866835226","&lt; 00:01","26.0"],["2020 BD5","3","2458865.111557858","2020-Jan-16 14:41","0.0199486399763776","0.0197779162756959","0.0201193580152502","12.1405465842978","12.1295398689102","00:34","26.944"],["2020 BY1","11","2458865.490285688","2020-Jan-16 23:46","0.0107599664393985","0.0107368746732969","0.0107830580331369","16.8373681865613","16.8226546514706","&lt; 00:01","26.3... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20200926 05:36:06.822" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:00.787" endtime="20200926 05:36:06.822"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:06.822" endtime="20200926 05:36:06.835"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_1}</var>
</assign>
<msg timestamp="20200926 05:36:06.838" level="INFO">${count_1} = 991</msg>
<status status="PASS" starttime="20200926 05:36:06.835" endtime="20200926 05:36:06.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-01-01</arg>
<arg>date-max=2020-05-01</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:06.839" level="INFO">${params} = {'date-min': '2020-01-01', 'date-max': '2020-05-01'}</msg>
<status status="PASS" starttime="20200926 05:36:06.838" endtime="20200926 05:36:06.839"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:10.716" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01&amp;date-max=2020-05-01 
 path_url=/cad.api/?date-min=2020-01-01&amp;date-max=2020-05-01 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:10.723" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01&amp;date-max=2020-05-01 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"505","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 AY1","18","2458849.537524496","2020-Jan-01 00:54","0.0211660525256395","0.0211628345552616","0.0211692704882042","5.62203195551878","5.59959589405614","&lt; 00:01","25.1"],["2019 YK","10","2458849.587205145","2020-Jan-01 02:06","0.0361009669651545","0.0360768281418277","0.036125105699654","7.35926323695148","7.34922735808709","&lt; 00:01","24.0"],["2020 AP3","3","2458849.967321891","2020-Jan-01 11:13","0.016740489928579","0.0165847767193932","0.0168961703957377","5.19125156562752","5.16050048887452","00:05","26.553"],["2020 AN2","1","2458850.387698740","2020-Jan-01 21:18","0.020214316165424","0.0196465481009428","0.0207820803258877","15.352815636266","15.3442277407805","00:33","26.5"],["2020 AX","5","2458850.450408128","2020-Jan-01 22:49","0.0496561819852301","0.0491870434455958","0.0501253026338964","7.31673540668655","7.30939805228442","00:04","26.3"],["2020 AC","6","2458850.788622951","2020-Jan-02 06:56","0.0086567240263386","0.00864974351431503","0.00866370436258854","5.79319914432443","5.73982319076542","&lt; 00:01","26.7"],["2020 AD","2","2458850.883299537","2020-Jan-02 09:12","0.00598231592486201","0.0059725724215154","0.00599205528838674","15.6228249367712","15.5942897809943","&lt; 00:01","27.2"],["2019 YH2","6","2458850.900095075","2020-Jan-02 09:36","0.0189064391976048","0.0188309812550671","0.0189818963096383","14.2986027570166","14.2887431688911","&lt; 00:01","23.2"],["2020 AP1","1","2458851.147682974","2020-Jan-02 15:33","0.00218473067276251","0.00217927215347409","0.0021901874886484","5.60854260728927","5.3867027791126","00:02","29.6"],["2019 AE3","2","2458851.172133578","2020-Jan-02 16:08","0.0124617942589971","0.0102637341763702","0.0147485893784087","8.24334619449703","8.2173677521365","01:16","27.4"],["2020 AC1","5","2458851.451288471","2020-Jan-02 22:50","0.0053331708788871","0.00531870799651352","0.00534763178772396","6.22573482025152","6.14496247867502","&lt; 00:01","28.4"],["2020 AU2","2","2458852.743126790","2020-Jan-04 05:50","0.0362370373581473","0.0360799222069259","0.0363941497888636","8.58447059261287","8.57590094463927","&lt; 00:01","25.1"],["2020 AN1","5","2458852.791778668","2020-Jan-04 07:00","0.00660719180433069","0.00659964184792792","0.00661474166108693","11.8318436891099","11.7977110475613","&lt; 00:01","25.9"],["2019 YB4","3","2458852.938731317","2020-Jan-04 10:32","0.00839319133276653","0.00836445227453188","0.00842192698258187","6.05791527129178","6.00528292075859","&lt; 00:01","26.8"],["2020 AM2","1","2458853.071699348","2020-Jan-04 13:43","0.0276286812081139","0.0274919464520481","0.0277654142324379","10.1138872947035","10.104347501482","00:04","26.7"],["2020 BM2","3","2458853.706063020","2020-Jan-05 04:57","0.0430123017397846","0.0426638152968863","0.0433607371372465","3.73219522611631","3.71556017024846","00:01","26.936"],["2020 AU1","4","2458854.523114803","2020-Jan-06 00:33","0.0106184868724244","0.0106014537261088","0.0106355193127792","6.27043847552401","6.23029228730618","&lt; 00:01","26.5"],["2020 AW","2","2458854.575304448","2020-Jan-06 01:48","0.0122321188618621","0.0122021753031332","0.0122620588323141","4.27254608270279","4.2212553912473","&lt; 00:01","28.7"],["2019 YT3","5","2458855.617648667","2020-Jan-07 02:49","0.0337557033069716","0.0335880244359087","0.0339233773341538","7.36997485420124","7.35925682099656","&lt; 00:01","25.8"],["2020 BL1","1","2458855.782906935","2020-Jan-07 06:47","0.0298687536847927","0.0296941588592095","0.0300433437146222","8.85520211047762","8.84512249371599","00:03","25.717"],["2020 AV1","6","2458855.823737770","2020-Jan-07 07:46","0.0186063515609208","0.0184687549594991","0.0187439441716533","12.0924879021658","12.0806398138363","&lt; 00:01","26.0"],["2020 AJ1","4","2458856.124992546","2020-Jan-07 15:00","0.0346991631224265","0.0345491695211622","0.0348491563177099","22.1660970799579","22.1626325998996","&lt; 00:01","23.3"],["2020 AR1","3","2458856.720366871","2020-Jan-08 05:17","0.0177505164227812","0.0176606672549202","0.0178403626215284","9.58785726128748","9.57218849445464","&lt; 00:01","27.2"],["2020 AT1","5","2458857.996855590","2020-Jan-09 11:55","0.00633938630613782","0.00631527555116527","0.00636349329609274","6.22829267403799","6.16043979803496","&lt; 00:01","27.6"],["2019 YV","16","2458858.520158941","2020-Jan-10 00:29","0.0443178901560734","0.0443157288409105","0.0443200514700624","4.53697744225617","4.52370648363655","&lt; 00:01","23.6"],["2020 AL2","1","2458858.756895584","2020-Jan-10 06:10","0.0159318034212603","0.0157410707737164","0.0161225336186759","24.7866414447066","24.7798932305596","00:01","25.6"],["2019 YF4","12","2458858.892083832","2020-Jan-10 09:25","0.00954448834371407","0.00954404748008589","0.00954492920420093","2.89711822613741","2.79910086284231","&lt; 00:01","27.0"],["2020 BK7","6","2458859.217912294","2020-Jan-10 17:14","0.0316920487401043","0.0315434088357134","0.0318406700362621","3.55778309909172","3.53407306828208","&lt; 00:01","25.962"],["2019 UO","84","2458859.491600298","2020-Jan-10 23:48","0.0302099374103646","0.0302098072916766","0.0302100675290542","9.39531630593629","9.3859240859659","&lt; 00:01","20.1"],["2020 AH3","4","2458859.574658701","2020-Jan-11 01:48","0.0231105526292864","0.0229640260132234","0.0232570772237124","14.2693109163786","14.2612288570615","&lt; 00:01","24.254"],["2019 WC5","19","2458859.759703757","2020-Jan-11 06:14","0.0162624892955758","0.0162603344325674","0.0162646441578992","12.9762867470008","12.963654333201","&lt; 00:01","22.5"],["2019 YV5","2","2458860.067475859","2020-Jan-11 13:37","0.0430279358182858","0.0427644404184399","0.0432914291156796","13.9380966426353","13.9336531178583","00:05","24.4"],["2020 BW8","6","2458861.209651951","2020-Jan-12 17:02","0.0115463719744305","0.0114941386662305","0.0115986010083167","7.24057186256496","7.20863053715018","00:03","25.964"],["2020 AO1","5","2458861.303919276","2020-Jan-12 19:18","0.0218663603769919","0.0217361017608945","0.0219966177935347","17.7190575181352","17.7121792430779","&lt; 00:01","23.7"],["2020 AJ3","4","2458861.330696221","2020-Jan-12 19:56","0.0478128242728652","0.0475196138358913","0.0481060311431819","10.6140052979946","10.608753643898","&lt; 00:01","25.715"],["2020 AB2","4","2458861.440639751","2020-Jan-12 22:35","0.00980694401472586","0.00973984099834867","0.00987403915634519","7.95663578807888","7.92241546496639","&lt; 00:01","27.0"],["2020 BV5","2","2458861.509972716","2020-Jan-13 00:14","0.0374418990725117","0.037154429471227","0.0377293607415738","8.86675366045396","8.85872419688304","00:02","26.461"],["2020 AE","9","2458861.694477654","2020-Jan-13 04:40","0.0298869011090523","0.0297512789193551","0.0300225185311069","6.76453454099903","6.75134234063491","&lt; 00:01","25.7"],["2020 AX2","2","2458861.915175989","2020-Jan-13 09:58","0.0255172881798727","0.0253729470137191","0.0256616218560749","6.76217606346143","6.74671682572839","&lt; 00:01","25.5"],["2020 AS1","3","2458861.926353998","2020-Jan-13 10:14","0.0404535548668482","0.0400721353213829","0.0408349450757917","5.6902982703246","5.67871148336271","00:01","26.7"],["2020 AE1","1","2458862.076175404","2020-Jan-13 13:50","0.0168284978292684","0.0165836392367664","0.0170764214896591","4.17147892861847","4.13334896731544","01:17","27.6"],["2020 BH","10","2458862.549268324","2020-Jan-14 01:11","0.00699905294568505","0.00699533061609167","0.00700277502783358","3.42685624210207","3.31390417531213","&lt; 00:01","28.248"],["2020 BM","2","2458863.042867911","2020-Jan-14 13:02","0.0312664848075225","0.0310166396799744","0.0315163194294224","7.98556811798908","7.97488942852434","&lt; 00:01","26.412"],["2020 AO","4","2458863.259067707","2020-Jan-14 18:13","0.0239333931189359","0.023620126252802","0.024246655213638","19.472051905479","19.4663336950079","00:03","24.3"],["2020 BS","7","2458863.271588302","2020-Jan-14 18:31","0.00768448997942411","0.00766871787518952","0.00770025948340629","4.1289228083209","4.04407395511947","&lt; 00:01","27.963"],["2020 BD","7","2458863.323779827","2020-Jan-14 19:46","0.0124188552955806","0.0123946471723552","0.0124430631177465","11.4958984454696","11.4772199954756","&lt; 00:01","26.218"],["2020 BZ1","3","2458863.561137594","2020-Jan-15 01:28","0.00639999571053261","0.00637397365071451","0.00642601481844757","7.70815167306289","7.65395008239934","00:01","26.889"],["2020 CZ1","1","2458864.050230682","2020-Jan-15 13:12","0.024722669216713","0.0243592603551492","0.0250860510526617","8.82360219248835","8.81137935648824","01:13","25.475"],["2017 RZ15","1","2458864.081593637","2020-Jan-15 13:57","0.0310326681469712","0.0256714303601913","0.0420252347339659","7.38850984297679","7.37687988030529","01:47","27.1"],["2020 BV2","2","2458864.353995453","2020-Jan-15 20:30","0.0219676071692436","0.0218215941297936","0.0221135838473737","3.6440004157167","3.61056179236584","00:01","27.817"],["2020 BC","4","2458864.436995921","2020-Jan-15 22:29","0.0264386553251573","0.0263362248683651","0.0265410806745984","5.60377782154836","5.58576463025675","&lt; 00:01","26.107"],["2020 AZ1","4","2458864.540783514","2020-Jan-16 00:59","0.0211595856816484","0.0210530973694149","0.0212660566277061","3.95573395042304","3.92377178338542","&lt; 00:01","26.6"],["2020 BD1","6","2458864.569989008","2020-Jan-16 01:41","0.0103407166728558","0.0103212377597698","0.0103601954666104","17.6117254591308","17.597088855455","&lt; 00:01","27.45"],["2019 YD3","15","2458864.690405333","2020-Jan-16 04:34","0.0176075753122292","0.0175989656893766","0.0176161848237085","4.8395091622128","4.80813866835226","&lt; 00:01","26.0"],["2020 BD5","3","2458865.111557858","2020-Jan-16 14:41","0.0199486399763776","0.0197779162756959","0.0201193580152502","12.1405465842978","12.1295398689102","00:34","26.944"],["2020 BY1","11","2458865.490285688","2020-Jan-16 23:46","0.0107599664393985","0.0107368746732969","0.0107830580331369","16.8373681865613","16.8226546514706","&lt; 00:01","26.3... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20200926 05:36:10.726" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:06.839" endtime="20200926 05:36:10.726"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:10.726" endtime="20200926 05:36:10.736"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_2}</var>
</assign>
<msg timestamp="20200926 05:36:10.739" level="INFO">${count_2} = 505</msg>
<status status="PASS" starttime="20200926 05:36:10.737" endtime="20200926 05:36:10.739"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count_2}&lt;${count_1}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:10.739" endtime="20200926 05:36:10.740"></status>
</kw>
<doc>Querying within a shorter date range should return smaller count in output</doc>
<status status="PASS" starttime="20200926 05:36:00.783" endtime="20200926 05:36:10.740" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Valid Query with data range YYYY-MM-DDThh:mm:ss format">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:10.744" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:10.743" endtime="20200926 05:36:10.744"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-01-01T00:10:10</arg>
<arg>date-max=2020-01-01T10:10:10</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:10.745" level="INFO">${params} = {'date-min': '2020-01-01T00:10:10', 'date-max': '2020-01-01T10:10:10'}</msg>
<status status="PASS" starttime="20200926 05:36:10.745" endtime="20200926 05:36:10.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:13.659" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01T00%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 path_url=/cad.api/?date-min=2020-01-01T00%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:13.660" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01T00%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"2","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 AY1","18","2458849.537524496","2020-Jan-01 00:54","0.0211660525256395","0.0211628345552616","0.0211692704882042","5.62203195551878","5.59959589405614","&lt; 00:01","25.1"],["2019 YK","10","2458849.587205145","2020-Jan-01 02:06","0.0361009669651545","0.0360768281418277","0.036125105699654","7.35926323695148","7.34922735808709","&lt; 00:01","24.0"]]}
 
 </msg>
<msg timestamp="20200926 05:36:13.660" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:10.745" endtime="20200926 05:36:13.661"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:13.661" endtime="20200926 05:36:13.664"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_1}</var>
</assign>
<msg timestamp="20200926 05:36:13.665" level="INFO">${count_1} = 2</msg>
<status status="PASS" starttime="20200926 05:36:13.664" endtime="20200926 05:36:13.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-01-01T05:10:10</arg>
<arg>date-max=2020-01-01T10:10:10</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:13.666" level="INFO">${params} = {'date-min': '2020-01-01T05:10:10', 'date-max': '2020-01-01T10:10:10'}</msg>
<status status="PASS" starttime="20200926 05:36:13.666" endtime="20200926 05:36:13.667"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:15.771" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01T05%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 path_url=/cad.api/?date-min=2020-01-01T05%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:15.772" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-01T05%3A10%3A10&amp;date-max=2020-01-01T10%3A10%3A10 
 status=200, reason=OK 
 body={"count":"0","signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"}}
 
 </msg>
<msg timestamp="20200926 05:36:15.773" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:13.667" endtime="20200926 05:36:15.773"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:15.774" endtime="20200926 05:36:15.778"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
</arguments>
<assign>
<var>${count_2}</var>
</assign>
<msg timestamp="20200926 05:36:15.779" level="INFO">${count_2} = 0</msg>
<status status="PASS" starttime="20200926 05:36:15.778" endtime="20200926 05:36:15.779"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count_2}&lt;${count_1}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:15.779" endtime="20200926 05:36:15.780"></status>
</kw>
<doc>Querying within a shorter date range should return smaller count in output</doc>
<status status="PASS" starttime="20200926 05:36:10.742" endtime="20200926 05:36:15.781" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Invalid Query with data range +D and now">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:15.790" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:15.788" endtime="20200926 05:36:15.791"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=now</arg>
<arg>date-max=qwd</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:15.795" level="INFO">${params} = {'date-min': 'now', 'date-max': 'qwd'}</msg>
<status status="PASS" starttime="20200926 05:36:15.792" endtime="20200926 05:36:15.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:16.658" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=qwd 
 path_url=/cad.api/?date-min=now&amp;date-max=qwd 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:16.659" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=qwd 
 status=400, reason=Bad Request 
 body={"moreInfo":"https://ssd-api.jpl.nasa.gov/doc/cad.html","message":"invalid value specified for query parameter 'date-max': invalid datetime specified (expected 'YYYY-MM-DD', 'YYYY-MM-DDThh:mm:ss', 'YYYY-MM-DD_hh:mm:ss' or 'YYYY-MM-DD hh:mm:ss')","code":"400"}
 
 </msg>
<msg timestamp="20200926 05:36:16.659" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:15.796" endtime="20200926 05:36:16.659"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>400</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:16.660" endtime="20200926 05:36:16.661"></status>
</kw>
<doc>verify status 400 on invalid queries</doc>
<status status="PASS" starttime="20200926 05:36:15.784" endtime="20200926 05:36:16.662" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Invalid Query with data range YYYY-MM-DD format">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:16.669" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:16.667" endtime="20200926 05:36:16.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-1-1</arg>
<arg>date-max=+10</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:16.670" level="INFO">${params} = {'date-min': '2020-1-1', 'date-max': '+10'}</msg>
<status status="PASS" starttime="20200926 05:36:16.669" endtime="20200926 05:36:16.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:17.521" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-1-1&amp;date-max=%2B10 
 path_url=/cad.api/?date-min=2020-1-1&amp;date-max=%2B10 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:17.521" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-1-1&amp;date-max=%2B10 
 status=400, reason=Bad Request 
 body={"moreInfo":"https://ssd-api.jpl.nasa.gov/doc/cad.html","message":"invalid value specified for query parameter 'date-min': invalid datetime specified (expected 'YYYY-MM-DD', 'YYYY-MM-DDThh:mm:ss', 'YYYY-MM-DD_hh:mm:ss' or 'YYYY-MM-DD hh:mm:ss')","code":"400"}
 
 </msg>
<msg timestamp="20200926 05:36:17.522" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:16.671" endtime="20200926 05:36:17.522"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>400</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:17.522" endtime="20200926 05:36:17.524"></status>
</kw>
<doc>verify status 400 on invalid queries</doc>
<status status="PASS" starttime="20200926 05:36:16.662" endtime="20200926 05:36:17.524" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Invalid Query with data range YYYY-MM-DDThh:mm:ss format">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:17.531" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:17.530" endtime="20200926 05:36:17.533"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=2020-01-0105:10:10</arg>
<arg>date-max=+10</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:17.534" level="INFO">${params} = {'date-min': '2020-01-0105:10:10', 'date-max': '+10'}</msg>
<status status="PASS" starttime="20200926 05:36:17.533" endtime="20200926 05:36:17.534"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:18.389" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-0105%3A10%3A10&amp;date-max=%2B10 
 path_url=/cad.api/?date-min=2020-01-0105%3A10%3A10&amp;date-max=%2B10 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:18.390" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=2020-01-0105%3A10%3A10&amp;date-max=%2B10 
 status=400, reason=Bad Request 
 body={"moreInfo":"https://ssd-api.jpl.nasa.gov/doc/cad.html","message":"invalid value specified for query parameter 'date-min': invalid datetime specified (expected 'YYYY-MM-DD', 'YYYY-MM-DDThh:mm:ss', 'YYYY-MM-DD_hh:mm:ss' or 'YYYY-MM-DD hh:mm:ss')","code":"400"}
 
 </msg>
<msg timestamp="20200926 05:36:18.390" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:17.534" endtime="20200926 05:36:18.390"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>400</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:18.391" endtime="20200926 05:36:18.393"></status>
</kw>
<doc>verify status 400 on invalid queries</doc>
<status status="PASS" starttime="20200926 05:36:17.528" endtime="20200926 05:36:18.393" critical="yes"></status>
</test>
<status status="PASS" starttime="20200926 05:35:55.043" endtime="20200926 05:36:18.398"></status>
</suite>
<suite id="s1-s2" name="Tests" source="/testcases/tests.robot">
<test id="s1-s2-t1" name="Default Parameters">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:18.441" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:18.440" endtime="20200926 05:36:18.443"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:19.334" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/ 
 path_url=/cad.api/ 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:19.336" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/ 
 status=200, reason=OK 
 body={"signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"},"count":"38","fields":["des","orbit_id","jd","cd","dist","dist_min","dist_max","v_rel","v_inf","t_sigma_f","h"],"data":[["2020 SQ4","1","2459119.253705607","2020-Sep-26 18:05","0.00236326129937573","0.00234794221476587","0.00237857780739009","12.928103612861","12.8405975629144","&lt; 00:01","28.877"],["2020 RF4","5","2459119.355559825","2020-Sep-26 20:32","0.0299720155857069","0.0297019312512143","0.0302420954605105","13.8024017871393","13.7959594550554","&lt; 00:01","24.647"],["2020 RF5","5","2459120.135334942","2020-Sep-27 15:15","0.0361233379660649","0.0360035918598666","0.0362430763665069","3.89287417547284","3.873880242332","00:01","24.093"],["2020 SU4","1","2459120.149922359","2020-Sep-27 15:36","0.0321540804542953","0.0319171037144888","0.0323910531364174","9.10819583775812","9.09909333186976","00:04","23.583"],["2020 SO4","2","2459120.454852107","2020-Sep-27 22:55","0.0172734082684217","0.0171210147343767","0.017425787843728","7.63994487438416","7.61972776329167","&lt; 00:01","27.338"],["2020 SY4","1","2459121.254165600","2020-Sep-28 18:06","0.00483883371779662","0.00482232459881732","0.0048553423928586","16.1192324413903","16.0850354244224","00:02","27.455"],["2020 PM7","13","2459122.094220599","2020-Sep-29 14:16","0.0191995697170515","0.0191994151379874","0.0191997242961396","8.33399698633299","8.31732827397181","&lt; 00:01","22.366"],["2020 SQ","4","2459123.173384542","2020-Sep-30 16:10","0.0146185345453072","0.0145425586481242","0.0146945023061576","5.9297335210296","5.89891559809395","&lt; 00:01","27.462"],["2020 SO2","3","2459123.362170771","2020-Sep-30 20:42","0.0462213632197174","0.0460479717290339","0.0463947540313387","14.7536426928334","14.7497349330028","&lt; 00:01","24.782"],["2020 SM4","1","2459123.580813959","2020-Oct-01 01:56","0.0209051291867191","0.0204109784606601","0.0213991782753833","7.61794334093787","7.60119393291081","00:05","27.662"],["2020 RJ3","6","2459123.898031237","2020-Oct-01 09:33","0.0391539311841341","0.0389101923279274","0.0393976682969611","15.4814457717605","15.4770494736317","00:01","23.591"],["2001 GP2","16","2459124.124581813","2020-Oct-01 14:59","0.0156459035754592","0.000909498572984523","0.0367119299148074","2.21414127161807","2.13584266201369","6_17:18","26.9"],["2020 RZ3","4","2459124.856553334","2020-Oct-02 08:33","0.0400047896442245","0.0396029188014945","0.0404066545317252","13.2463832308905","13.2413541861552","&lt; 00:01","24.909"],["2020 SY3","1","2459125.598386229","2020-Oct-03 02:22","0.0425861476823042","0.0419222821967175","0.0432499722110021","7.80454708858754","7.79652625477589","00:03","25.859"],["2010 UC","10","2459126.848329403","2020-Oct-04 08:22","0.0372611055270925","0.0311238017016864","0.0437269116807565","3.21236292632068","3.19002490826751","1_04:00","27.4"],["2020 RV2","8","2459128.455794825","2020-Oct-05 22:56","0.0380358854669288","0.0378990941391581","0.0381726686949511","4.16017343376627","4.14330056255971","&lt; 00:01","25.675"],["2020 RR2","6","2459129.121458052","2020-Oct-06 14:55","0.0417278866831971","0.0414797796890583","0.0419759705656133","4.08058647587182","4.0649081929112","00:01","25.447"],["2020 RK2","8","2459130.049769445","2020-Oct-07 13:12","0.025593809947634","0.0255051781557218","0.0256824388679742","6.67895045980567","6.66334498961714","00:02","24.282"],["2019 SB6","2","2459130.474376995","2020-Oct-07 23:23","0.0304426271757058","0.0227471207759548","0.038143587726216","7.57778003426213","7.56622105215934","03:41","26.8"],["2020 SX3","1","2459130.969118184","2020-Oct-08 11:16","0.0113552897778354","0.0113219329492695","0.011388646066506","10.8793643184594","10.8577748602004","00:13","24.237"],["2020 RO1","5","2459132.176101537","2020-Oct-09 16:14","0.0446415058754544","0.0446116500030021","0.0446713612988751","3.21348334260181","3.19485569402529","&lt; 00:01","25.405"],["2018 GD2","1","2459136.073021506","2020-Oct-13 13:45","0.0418695882785897","0.0370963199607446","0.0466556919039509","6.70010747896787","6.69060274315132","03:59","29.4"],["2020 RM6","2","2459137.715925501","2020-Oct-15 05:11","0.0332721522815656","0.0331709286933099","0.033373374308984","7.70853312607536","7.69813745186573","00:30","24.795"],["2017 UH5","2","2459142.636167668","2020-Oct-20 03:16","0.0228340554196692","0.0222591527415551","0.0414088955279864","5.92821261429195","5.90849618170005","6_12:30","26.5"],["2020 SG3","1","2459143.417349553","2020-Oct-20 22:01","0.0499704765003738","0.0496206318726607","0.0503203051288128","5.33538314966816","5.32537991238859","00:21","25.14"],["2018 VG","3","2459144.153455600","2020-Oct-21 15:41","0.0387040891193301","0.0374898264219415","0.0399273001093406","6.72609608291864","6.7158531754433","19:40","27.4"],["2017 TK6","8","2459146.940793558","2020-Oct-24 10:35","0.0441892043374442","0.0424566365206183","0.0471094261315949","12.4455264686515","12.4406806466282","03:58","24.7"],["2008 GM2","12","2459148.492460866","2020-Oct-25 23:49","0.0452029089395396","0.0362103357028827","0.0545926865198956","3.58621722267222","3.56974288141363","07:38","28.3"],["2020 QD5","2","2459148.621940456","2020-Oct-26 02:56","0.025763042373117","0.0257243482456801","0.0258017423282164","8.56921365449276","8.55713606131734","00:45","23.227"],["2020 OK5","17","2459151.871015311","2020-Oct-29 08:54","0.0164352219242664","0.016426932284683","0.0164435102936967","1.2862131423086","1.15330139442132","00:03","25.558"],["2018 VP1","4","2459155.981541014","2020-Nov-02 11:33","0.00280167254552464","3.90766585857012e-05","0.0256085074009903","9.71114662839966","9.61271582257126","3_07:11","30.9"],["2020 HF4","5","2459157.453326852","2020-Nov-03 22:53","0.0414035151003734","0.0410997052947467","0.0417073377153219","2.88844049797212","2.86607407960607","00:04","27.563"],["2010 JL88","7","2459159.419528397","2020-Nov-05 22:04","0.0267818380363214","0.00118085989258472","0.124246396626902","15.6639825482897","15.6576298553779","5_18:57","26.8"],["2019 XS","4","2459161.384049088","2020-Nov-07 21:13","0.0393955999561795","0.0348619785193184","0.0439367808461489","9.44588784861025","9.43872498720352","03:14","24.2"],["2018 VS4","3","2459162.958550490","2020-Nov-09 11:00","0.0381472776329596","0.0344188790586722","0.0835829161332143","10.0703922632204","10.0634539795072","5_07:22","25.8"],["2020 ST1","2","2459167.856242321","2020-Nov-14 08:33","0.0488551080602693","0.0485770562763381","0.0491331592150588","8.05151987430075","8.04474334518222","01:25","21.684"],["2019 VL5","2","2459168.934759671","2020-Nov-15 10:26","0.021732810007007","0.0217292375096055","0.0223542176744774","8.17741153263742","8.16240503679483","04:03","25.9"],["2017 WJ16","5","2459177.036929361","2020-Nov-23 12:53","0.0127091896304229","0.01043030494715","0.01572438024177","4.75066355638837","4.70632601749626","1_18:20","24.3"]]}
 
 </msg>
<msg timestamp="20200926 05:36:19.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:18.444" endtime="20200926 05:36:19.337"></status>
</kw>
<kw name="Verify Output Format" library="helper">
<arguments>
<arg>${resp.text}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:19.337" endtime="20200926 05:36:19.341"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp.json()["count"]}&gt;0</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:19.343" endtime="20200926 05:36:19.344"></status>
</kw>
<status status="PASS" starttime="20200926 05:36:18.437" endtime="20200926 05:36:19.344" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Restrictive Query Output with Zero Count">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:19.347" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:19.346" endtime="20200926 05:36:19.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>date-min=now</arg>
<arg>date-max=+0</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:19.348" level="INFO">${params} = {'date-min': 'now', 'date-max': '+0'}</msg>
<status status="PASS" starttime="20200926 05:36:19.348" endtime="20200926 05:36:19.348"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:21.020" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B0 
 path_url=/cad.api/?date-min=now&amp;date-max=%2B0 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:21.021" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?date-min=now&amp;date-max=%2B0 
 status=200, reason=OK 
 body={"count":"0","signature":{"source":"NASA/JPL SBDB Close Approach Data API","version":"1.1"}}
 
 </msg>
<msg timestamp="20200926 05:36:21.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:19.349" endtime="20200926 05:36:21.022"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp.json()["count"]}</arg>
<arg>0</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:21.022" endtime="20200926 05:36:21.024"></status>
</kw>
<status status="PASS" starttime="20200926 05:36:19.345" endtime="20200926 05:36:21.024" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="Unsuccesful Query">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>API</arg>
<arg>${API_URL}</arg>
<arg>verify=true</arg>
</arguments>
<msg timestamp="20200926 05:36:21.031" level="INFO">Creating Session using : alias=API, url=https://ssd-api.jpl.nasa.gov/cad.api, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=True,                     debug=0 </msg>
<status status="PASS" starttime="20200926 05:36:21.029" endtime="20200926 05:36:21.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>dist=30</arg>
</arguments>
<assign>
<var>${params}</var>
</assign>
<msg timestamp="20200926 05:36:21.034" level="INFO">${params} = {'dist': '30'}</msg>
<status status="PASS" starttime="20200926 05:36:21.032" endtime="20200926 05:36:21.034"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>API</arg>
<arg>/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20200926 05:36:21.902" level="INFO">GET Request : url=https://ssd-api.jpl.nasa.gov/cad.api/?dist=30 
 path_url=/cad.api/?dist=30 
 headers={'User-Agent': 'python-requests/2.24.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20200926 05:36:21.902" level="INFO">GET Response : url=https://ssd-api.jpl.nasa.gov/cad.api/?dist=30 
 status=400, reason=Bad Request 
 body={"moreInfo":"https://ssd-api.jpl.nasa.gov/doc/cad.html","message":"one or more query parameter was not recognized","code":"400"}
 
 </msg>
<msg timestamp="20200926 05:36:21.903" level="INFO">${resp} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20200926 05:36:21.034" endtime="20200926 05:36:21.903"></status>
</kw>
<kw name="Status Should Be" library="RequestsLibrary">
<doc>Fails if response status code is different than the expected.</doc>
<arguments>
<arg>400</arg>
<arg>${resp}</arg>
</arguments>
<status status="PASS" starttime="20200926 05:36:21.903" endtime="20200926 05:36:21.904"></status>
</kw>
<status status="PASS" starttime="20200926 05:36:21.027" endtime="20200926 05:36:21.905" critical="yes"></status>
</test>
<status status="PASS" starttime="20200926 05:36:18.411" endtime="20200926 05:36:21.908"></status>
</suite>
<status status="PASS" starttime="20200926 05:35:55.010" endtime="20200926 05:36:21.929"></status>
</suite>
<statistics>
<total>
<stat pass="9" fail="0">Critical Tests</stat>
<stat pass="9" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="9" fail="0" id="s1" name="Testcases">Testcases</stat>
<stat pass="6" fail="0" id="s1-s1" name="Query With Date">Testcases.Query With Date</stat>
<stat pass="3" fail="0" id="s1-s2" name="Tests">Testcases.Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
